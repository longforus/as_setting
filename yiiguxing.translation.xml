<application>
  <component name="AppStorage">
    <histories>
      <item value="Creates a collapsed selection at the given offset." />
      <item value="collapsed" />
      <item value="Pads this string on the left if it is shorter than [width]." />
      <item value="Intrinsic" />
      <item value="Capitalization" />
      <item value="override" />
      <item value="Tell Gradle to exclude the objectbox-android dependency that is added by objectbox_flutter_libs for debug builds." />
      <item value="amplitude" />
      <item value="reduce" />
      <item value="elevated" />
      <item value="Cause an invalidate to happen on a subsequent cycle through the event loop. Waits for the specified amount of time. This method can be invoked from outside of the UI thread only when this View is attached to a window." />
      <item value="there are empty" />
      <item value="Prefetch distance which defines how far from the edge of loaded content an access must be to trigger further loading. Typically should be set several times the number of visible items onscreen. E.g., If this value is set to 50, a [PagingData] will attempt to load 50 items in advance of data that's already been accessed. A value of 0 indicates that no list items will be loaded until they are specifically requested. This is generally not recommended, so that users don't observe a placeholder item (with placeholders) or end of list (without) while scrolling." />
      <item value="delete On Exit" />
      <item value="barHolder.mTvTitle?.text = mImgPaths[0].wayBillNo" />
      <item value="include" />
      <item value="inclued" />
      <item value="it.retail Type==&quot;1&quot;" />
      <item value="qualifier" />
      <item value="This is an internal kotlinx.coroutines API that should not be used from outside of kotlinx.coroutines. No compatibility guarantees are provided.It is recommended to report your use-case of internal API to kotlinx.coroutines issue tracker, so stable API could be provided instead" />
      <item value="for Each" />
      <item value="ztlManager.netWorkType&gt;1||tts?.speak(str, mode, null, &quot;123123&quot;) != TextToSpeech.SUCCESS" />
      <item value="utterances" />
      <item value="earcons" />
      <item value="purged" />
      <item value="Queue mode where all entries in the playback queue (media to be played and text to be synthesized) are dropped and replaced by the new entry. Queues are flushed with respect to a given calling app. Entries in the queue from other callees are not discarded." />
      <item value="Sliver" />
      <item value="cacheObject.validTill == null || cacheObject.validTill.isBefore(new DateTime.now())" />
      <item value="indeterminate" />
      <item value="tts default synth" />
      <item value="proposed" />
      <item value="Get the technology-specific signal strength in Arbitrary Strength Units, calculated from the strength of the pilot signal or equivalent." />
      <item value="excellent" />
      <item value="Signal Strength" />
      <item value="signal strength" />
      <item value="quotes" />
      <item value="Pull Task.get Instance().pull()" />
      <item value="TagAliasOperatorHelper.getInstance().aliasOrTag(14444, TagAliasBean().apply { action = TagAliasOperatorHelper.ACTION_SET isAliasAction = false this.tags = tags })" />
      <item value="on Rec(-1)" />
      <item value="co.resume(it)" />
      <item value="item.remark?.let { CustomDialog.Builder(this).setContentView(R.layout.dialog_no_choice_layout_height).setText(R.id.tv_title, &quot;注意&quot;) .setText(R.id.tv_content, it).addAction(R.id.tv_left, &quot;确定&quot;) .show() }" />
      <item value="debugPrintThrottled(message.toString(), wrapWidth: wrapWidth);" />
      <item value="Implementation of [debugPrint] that throttles messages. This avoids dropping messages on platforms that rate-limit their logging (for example, Android)." />
      <item value="dbStartStep1(partition.first, brandCode)" />
      <item value="camera.get Parameters();" />
      <item value="terminal" />
      <item value="val ins = cr.openFileDescriptor(itemUri, &quot;r&quot;)" />
      <item value="m Pop.is Showing" />
      <item value="suffix" />
      <item value="If this string ends with the given [suffix], returns a copy of this string" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="179" />
        <entry key="ENGLISH" value="178" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="7" />
        <entry key="CZECH" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="INDONESIAN" value="3" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1656053783708" />
  </component>
  <component name="Settings">
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="599eb692e364732c" />
      </youdao-translate>
    </option>
  </component>
</application>